#!/bin/bash

hue_activate() {

  # hue activate was called without theme name.
  if [ -z $1 ]; then
    print_header "activate"
    printf "  Cannot activate an unspecified theme.\n\n"
    return;
  fi

  # Specified theme has not been generated.
  if [ ! -d $HOME/.hue/themes/$1/ ]; then
    print_header "activate"
    printf "  Theme does not exist.\n\n"
    return;
  fi

  # Symlink the active directory into ~/.hue/active
  rm "$HOME/.hue/active" 2> /dev/null
  ln -s $HOME/.hue/themes/$1/ $HOME/.hue/active

  printf "\n  ðŸŒ¿  $1 was activated.\n\n"
}

hue_delete() {

  # hue delete was called without theme name.
  if [ -z $1 ]; then
    print_header "delete"
    printf "  Cannot delete an unspecified theme.\n\n"
    return;
  fi

  # Specified theme has not been generated.
  if [ ! -d $HOME/.hue/themes/$1/ ]; then
    print_header "delete"
    printf "  Theme does not exist.\n\n"
    return;
  fi

  rm -rf $HOME/.hue/themes/$1/

  printf "\n  ðŸŒ¿  $1 was deleted.\n\n"
}

hue_create() {

  # Specified image cannot be found.
  if [ ! -f $1 ]; then
    print_header "create"
    printf "  Image not found.\n\n"
    return
  fi

  path=$1
  ext=${path##*.}
  file=${path##*/}
  theme=${file%.*}

  # Ensure ~/.hue/themes/ exists.
  if [ ! -d $HOME/.hue/themes/ ]; then
    mkdir -p "$HOME/.hue/themes/"
  fi

  # Handle theme conflicts.
  if [ -d $HOME/.hue/themes/$theme/ ]; then
    print_header "create"
    printf "  Theme already exists. Replace it? [y/n]: "
    read replace

    if [ $replace != "y" ]; then
      printf "  Theme was not changed.\n\n"
      return
    fi
  fi

  printf "\n  ðŸŒ¿  Creating new theme...\n"
  printf "  ðŸŒ¿  Generating theme colors...\n"
  get_colors
  set_colors
  printf "  ðŸŒ¿  Creating theme file...\n"
  create_file
  printf "  ðŸŒ¿  Opening theme file...\n"
  open_file
  printf "  ðŸŒ¿  Done!\n\n"
}

hue_open() {

  # If no theme specified, open active URL.
  if [ -z $1 ]; then
    printf "\n  ðŸŒ¿  Opening theme file...\n\n"
    open "$HOME/.hue/active/index.html"
    return
  fi

  # Specified theme has not been generated.
  if [ ! -f "$HOME/.hue/themes/$1/index.html" ]; then
    print_header "open"
    printf "  Theme does not exist.\n\n"
    return
  fi

  printf "\n  ðŸŒ¿  Opening theme file...\n\n"
  open "$HOME/.hue/themes/$1/index.html"

}

hue_copy() {

  # If no theme specified, copy active URL.
  if [ -z $1 ]; then
    printf "\n  ðŸŒ¿  Copied active theme file.\n\n"
    printf "$HOME/.hue/active/index.html" | pbcopy
    return
  fi

  # Specified theme has not been generated.
  if [ ! -d $HOME/.hue/themes/$1/ ]; then
    print_header "copy"
    printf "  Theme does not exist.\n\n"
    return
  fi

  printf "$HOME/.hue/themes/$1/index.html" | pbcopy
  printf "\n  ðŸŒ¿  Copied theme file.\n\n"
}

hue_list() {
  print_header "list"
  ls "$HOME/.hue/themes/"
}

hue_version() {
  hue_-v
}

hue() {
  version=0.1

  source args

  _command=$1; shift
  if type "hue_$_command" > /dev/null 2>&1; then
    "hue_$_command" "$@"
  else
    unknown $_command
  fi

  # print_hex
  # convert_colors
  # print_colors
  # print_256
  # create_file
  # adjust_colors
}

set_colors() {
  black="${colors[0]}"
  grey="${colors[1]}"
  red="${colors[2]}"
  green="${colors[3]}"
  blue="${colors[4]}"
  white="${colors[5]}"
}

open_file() {
  open "$page"
}

create_file() {
  page="$HOME/.hue/themes/$theme/index.html"
  mkdir -p "$HOME/.hue/themes/$theme/"
  cp "$path" "$HOME/.hue/themes/$theme/wal.$ext"
  cp html/template.html "$page"

  sed -i '' "s/{{black}}/$black/g" "$page"
  sed -i '' "s/{{grey}}/$grey/g" "$page"
  sed -i '' "s/{{red}}/$red/g" "$page"
  sed -i '' "s/{{green}}/$green/g" "$page"
  sed -i '' "s/{{blue}}/$blue/g" "$page"
  sed -i '' "s/{{white}}/$white/g" "$page"

  sed -i '' "s/{{path}}/wal.jpg/g" "$page"
  sed -i '' "s/{{theme}}/$theme/g" "$page"
}

get_colors() {
  colors=($(convert "$path" +dither -colors 6 -unique-colors txt:- | grep -E -o " \#.{6}"))
}

convert_colors() {
  colors_256=()
  for i in "${!colors[@]}"
  do
    color=${colors[$i]}
    colors_256[$i]=$(hex_to_256 ${color})
  done
}

print_256() {
  printf '%s\n' "${colors_256[@]}"
}

print_hex() {
  printf '%s\n' "${colors[@]}"
}

print_colors() {
  for i in "${!colors[@]}"
  do
    print_color ${colors_256[$i]} ${colors[$i]}
  done
}

print_color() {
  printf '\e[48;5;%sm %s \e[0m\n' $1 $2
}

hex_to_256() {
  hex=${1#'#'}
  r=$(printf '0x%0.2s' "$hex")
  g=$(printf '0x%0.2s' ${hex#??})
  b=$(printf '0x%0.2s' ${hex#????})
  printf '%03d\n' "$(( (r<75?0:(r-35)/40)*6*6 +
                     (g<75?0:(g-35)/40)*6   +
                     (b<75?0:(b-35)/40)     + 16 ))"
}
